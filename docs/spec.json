{"info": {"description": "\n### A service to perform geometric operations on geospatial datasets.\n\nThe *geometry service* offers the ability to apply geometric operations on one or more spatial files. Multiple geometric operations can be, in general, consecutively applied, before the final resulted file is exported and downloaded.\n\nThe service uses sessions to store the ingested and generated datasets. Each session is associated with a session token, and the related datasets are available only within this session. Almost every request to this service should transfer this token in its header. A session is automatically created when the first spatial file is ingested.\n\nFollowing the ingestion of a file, one can apply geometric operations in order to generate new datasets, or ingest more. Each dataset is associated with a user-defined *label*, which should be unique for the session. The user can choose upon which dataset is willing to apply each operation by choosing the corresponding label. Every session has one active dataset, which has the role to be the one used by default in cases that no label is supplied with the request. The active dataset is, in principle, the last ingested dataset, unless it has explicitly changed.\n\nThe session and all the related datasets are destroyed upon request or if the session remains idle for a certain amount of time.\n", "contact": {"email": "pmitropoulos@getmap.gr"}, "title": "Geometry API", "version": "0.0.1"}, "externalDocs": {"description": "GitHub", "url": "https://github.com/OpertusMundi/geometry-service"}, "paths": {"/static/{filename}": {}, "/session/": {"get": {"summary": "Information about the session.", "description": "Returns information about the session.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "responses": {"200": {"description": "Session was found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"lastRequest": {"type": "string", "format": "date-time", "description": "The datetime of last request of the session.", "example": "Thu, 11 Feb 2021 12:55:51 GMT"}, "numberOfDatasets": {"type": "integer", "description": "The numbers of datasets created during this session.", "example": 9}, "activeDataset": {"$ref": "#components/schemas/datasetExtendedInfo"}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}}}}, "/session/ingest": {"post": {"summary": "Uploads a spatial asset to subsequently use for geometric operations.", "description": "Ingests a spatial asset to session, in order to use it subsequently for geometric operations. The asset could be either uploaded either defined by a resolvable path. On succes, the dataset will be accessed by the label given in the request body, and would be available only within the session.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/ingestForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/ingestFormMultipart"}}}}, "responses": {"202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}}}}, "/session/close": {"delete": {"summary": "Closes a session.", "description": "All ingested and created datasets within the session are destroyed, and the session is closed.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "responses": {"200": {"description": "The session was closed.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "example": "ok"}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"description": "The session was not found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "example": "Session does not exist."}}}}}}}}}, "/session/set_active": {"put": {"summary": "Change the active dataset for the session.", "description": "Set the dataset specified by the given 'label' as the active dataset for the session.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"type": "object", "properties": {"label": {"type": "string", "description": "The label of the dataset which will become the active for the session.", "example": "dataset2"}}, "required": ["label"]}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}}}}, "/session/export": {"get": {"summary": "Returns a list with the exports requested in the session.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "responses": {"200": {"$ref": "#/components/responses/exportsListResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}}}, "post": {"summary": "Exports a database to file.", "tags": ["Session"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/exportForm"}}}}, "responses": {"202": {"$ref": "#/components/responses/deferredResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}}}}, "/dataset/": {"get": {"summary": "Returns a list of the available datasets in the session.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "tags": ["Dataset"], "responses": {"200": {"description": "The list with the session's datasets.", "content": {"application/json": {"schema": {"type": "array", "description": "Each item corresponds to a dataset, ordered by creation date.", "items": {"$ref": "#components/schemas/datasetExtendedInfo"}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}}}}, "/dataset/view": {"get": {"summary": "Paginated tabular view of the active dataset.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}, {"$ref": "#/components/parameters/page"}, {"$ref": "#/components/parameters/resultsPerPage"}], "tags": ["Dataset"], "responses": {"200": {"description": "A tabular view of the dataset subset for the given page.", "content": {"application/json": {"schema": {"type": "object", "properties": {"info": {"$ref": "#/components/schemas/paginationInfo"}, "data": {"type": "array", "description": "The actual data for the given page.", "items": {"type": "object", "description": "The key is the attribute name.", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "number"}]}}, "example": [{"id": 981, "name": "example", "geometry": "POLYGON((6.4 49., 6.5 50., 6.6 49.5, 6.4 49.))"}, {"id": 982, "name": "other_example", "geometry": "POINT(6.1659779 49.6150126)"}]}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/dataset/view/{label}": {"get": {"summary": "Paginated tabular view of the dataset corresponding to the given 'label'.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}, {"$ref": "#/components/parameters/label"}, {"$ref": "#/components/parameters/page"}, {"$ref": "#/components/parameters/resultsPerPage"}], "tags": ["Dataset"], "responses": {"200": {"description": "A tabular view of the dataset subset for the given page.", "content": {"application/json": {"schema": {"type": "object", "properties": {"info": {"$ref": "#/components/schemas/paginationInfo"}, "data": {"type": "array", "description": "The actual data for the given page.", "items": {"type": "object", "description": "The key is the attribute name.", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "number"}]}}, "example": [{"id": 981, "name": "example", "geometry": "POLYGON((6.4 49., 6.5 50., 6.6 49.5, 6.4 49.))"}, {"id": 982, "name": "other_example", "geometry": "POINT(6.1659779 49.6150126)"}]}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/dataset/geojson": {"get": {"summary": "Paginated GeoJSON view of the active dataset.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}, {"$ref": "#/components/parameters/page"}, {"$ref": "#/components/parameters/resultsPerPage"}], "tags": ["Dataset"], "responses": {"200": {"description": "A GeoJSON view of the dataset subset for the given page.", "content": {"application/json": {"schema": {"type": "object", "properties": {"info": {"$ref": "#/components/schemas/paginationInfo"}, "data": {"$ref": "#/components/schemas/geoJSON"}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/dataset/geojson/{label}": {"get": {"summary": "Paginated GeoJSON view of the dataset corresponding to the given 'label'.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}, {"$ref": "#/components/parameters/label"}, {"$ref": "#/components/parameters/page"}, {"$ref": "#/components/parameters/resultsPerPage"}], "tags": ["Dataset"], "responses": {"200": {"description": "A GeoJSON view of the dataset subset for the given page.", "content": {"application/json": {"schema": {"type": "object", "properties": {"info": {"$ref": "#/components/schemas/paginationInfo"}, "data": {"$ref": "#/components/schemas/geoJSON"}}}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/dataset/download/{filename}": {"get": {"summary": "Download an exported file.", "parameters": [{"$ref": "#/components/parameters/sessionToken"}, {"in": "path", "name": "filename", "schema": {"type": "string"}, "description": "The filename to download.", "required": true}], "tags": ["Dataset"], "responses": {"200": {"description": "The requested file.", "content": {"application/x-tar": {"schema": {"type": "string", "format": "binary"}}}}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"description": "File not found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "File not found."}}}}}}}}}, "/constructive/centroid": {"post": {"summary": "Constructs new geometries computing the centroid.", "description": "Creates a new dataset with the geometry of each feature replaced by its centroid. The new dataset will become the active dataset of the session, and will subsequently be accessible using the provided label.", "tags": ["Constructive"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/constructiveForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/constructive/convex_hull": {"post": {"summary": "Constructs new geometries computing the convex hull.", "description": "Creates a new dataset with the geometry of each feature replaced by its convex hull. The new dataset will become the active dataset of the session, and will subsequently be accessible using the provided label.", "tags": ["Constructive"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/constructiveForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/constructive/flip_geometries": {"post": {"summary": "Constructs new geometries flipping their coordinates.", "description": "Creates a new dataset with the geometry of each feature replaced by a new geometry with flipped coordinates. Useful for fixing geometries which contain coordinates expressed as latitude/longitude (Y,X).<br/>The new dataset will become the active dataset of the session, and will subsequently be accessible using the provided label.", "tags": ["Constructive"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/constructiveForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/constructive/make_valid": {"post": {"summary": "Constructs new valid geometries.", "description": "Creates a new dataset with the invalid geometries replaced by their valid representation, without losing any of the input vertices. Already-valid geometries are returned without further intervention.<br/>The new dataset will become the active dataset of the session, and will subsequently be accessible using the provided label.", "tags": ["Constructive"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/constructiveForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/contains": {"post": {"summary": "Apply contains filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that the given geometry is completely inside the geometry of every feature in this dataset. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/contains_properly": {"post": {"summary": "Apply contains_properly filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that the given geometry intersect the geometry of every feature in this dataset, **but** not its boundary (or exterior). The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/covers": {"post": {"summary": "Apply covers filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that no point in the given geometry is outside the geometry of every feature in this dataset. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/covered_by": {"post": {"summary": "Apply covered_by filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that no point in the geometry of every feature in this dataset is outside the given geometry. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/crosses": {"post": {"summary": "Apply crosses filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that the intersection of the given geometry and the geometry of each feature in this dataset *spatially crosses*, that is, the geometries have some, but not all interior points in common. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/disjoint": {"post": {"summary": "Apply disjoint filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with only those features that their geometry respects all of the following conditions:\n* **Do not spatially overlap** with the given geometry. Two geometries spatially overlap when they intersect, but one does not completely contain the other.\n* **Do not touch** the given geometry, i.e. if the two geometries have common points, these are not belong only on their exteriors (boundaries).\n* **Do not contain** the given geometry, i.e. there is at least one point of the given geometry outside the feature's geometry.\n> The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/intersects": {"post": {"summary": "Apply intersects filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that the given geometry and the geometry of each feature in this dataset share any portion of space. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/within": {"post": {"summary": "Apply within filter on the dataset with a given geometry.", "description": "Creates a new dataset, subset of the source, with the condition that each feature in this dataset is completely inside the given geometry. The geometry is provided either as a WKT string either as a text file containing the WKT.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterForm"}}, "multipart/form-data": {"schema": {"$ref": "#/components/schemas/filterFormMultipart"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/filter/within_buffer": {"post": {"summary": "Apply within_buffer filter on the dataset with a given buffer.", "description": "Creates a new dataset, subset of the source, with the condition that each feature in this dataset is within a given *radius* from a given point defined by *center_x*, *center_y*.", "tags": ["Filter"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/filterBufferForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/join/contains": {"post": {"summary": "Apply spatial join on two datasets drived by contains relationship.", "description": "Creates a joined dataset on the condition that the geometry of the second dataset (**right**) is completely inside the geometry of the first (**left**). The new dataset contains attributes from both datasets, prefixed with the label of each dataset, and geometry from the left dataset.", "tags": ["Join"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/joinForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/join/intersects": {"post": {"summary": "Apply spatial join on two datasets drived by intersects relationship.", "description": "Creates a joined dataset on the condition that two geometries intersects. The new dataset contains attributes from both datasets, prefixed with the label of each dataset, and geometry from the left dataset.", "tags": ["Join"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/joinForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/join/within": {"post": {"summary": "Apply spatial join on two datasets drived by within relationship.", "description": "Creates a joined dataset on the condition that the geometry of the first dataset (**left**) is completely inside the geometry of the other (**right**). The new dataset contains attributes from both datasets, prefixed with the label of each dataset, and geometry from the left dataset.", "tags": ["Join"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/joinForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/join/within_distance": {"post": {"summary": "Apply spatial join on two datasets drived by within distance relationship.", "description": "Creates a joined dataset on the condition that two geometries are within the given distance. The new dataset contains attributes from both datasets, prefixed with the label of each dataset, and geometry from the left dataset.", "tags": ["Join"], "parameters": [{"$ref": "#/components/parameters/sessionToken"}], "requestBody": {"required": true, "content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/joinDistanceForm"}}}}, "responses": {"200": {"$ref": "#/components/responses/newDatasetResponse"}, "400": {"$ref": "#/components/responses/validationErrorResponse"}, "401": {"$ref": "#/components/responses/noSessionResponse"}, "404": {"$ref": "#/components/responses/datasetNotFoundResponse"}}}}, "/jobs/": {"get": {"summary": "Get the running processes.", "description": "Get the running processes among all sessions.", "tags": ["Jobs"], "responses": {"200": {"description": "The list of the running processes.", "content": {"application/json": {"schema": {"type": "array", "items": {"description": "Details of the process.", "type": "object", "properties": {"sessionToken": {"type": "string", "description": "The session token that this process belongs."}, "sessionLastRequest": {"type": "string", "format": "date-time", "description": "Timestamp of the last request in the session."}, "ticket": {"type": "string", "description": "The ticket assigne to the process.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "idempotencyKey": {"type": "string", "description": "The X-Idempotency-Key sent in the headers of the request (null if the request was not associated with an idempotency key).", "example": "e5d16e99-dee1-4d16-acce-ca0f20a83a0a"}, "requestType": {"type": "string", "enum": ["ingest", "export"], "description": "Type of the request."}, "initiated": {"type": "string", "format": "date-time", "description": "The timestamp of the request."}}}}}}}}}}, "/jobs/status": {"get": {"summary": "Returns the status of a process.", "description": "Returns the status of the process identified by a ticket or idempotency key.", "tags": ["Jobs"], "parameters": [{"name": "ticket", "in": "query", "schema": {"type": "string"}, "required": false, "description": "The request ticket (required if *idempotency-key* is not given)."}, {"name": "idempotency-key", "in": "query", "schema": {"type": "string"}, "required": false, "description": "The idempotency-key sent with the request (required if *ticket* is not given)."}], "responses": {"200": {"description": "The process was found and the response contains its status details.", "content": {"application/json": {"schema": {"type": "object", "properties": {"ticket": {"type": "string", "description": "Request ticket.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "idempotencyKey": {"type": "string", "description": "The X-Idempotency-Key sent in the headers of the request (null if the request was not associated with an idempotency key).", "example": "e5d16e99-dee1-4d16-acce-ca0f20a83a0a"}, "requestType": {"type": "string", "enum": ["ingest", "export"], "description": "Type of the request."}, "initiated": {"type": "string", "format": "date-time", "description": "The timestamp of the request."}, "executionTime": {"type": "number", "format": "float", "description": "The execution time in seconds.", "example": 8.29}, "completed": {"type": "boolean", "description": "Whether the process has been completed."}, "success": {"type": "boolean", "description": "Whether the process has been completed succesfully."}, "errorMessage": {"type": "string", "description": "The error message in case of failure."}, "resources": {"type": "object", "description": "The resources associated with the process result.", "properties": {"datasetLabel": {"type": "string", "description": "The dataset label resulted from an ingestion request; null for any other type of request.", "example": "my_dataset"}, "link": {"type": "string", "description": "The link to download a resource resulted from an export request; null for any other type of request.", "example": "/download/my_dataset.tar.gz"}, "output_path": {"type": "string", "description": "The relative path of the resource resulted from an export request in the output directory; null for any other type of request or if copy to the output directory was not requested.", "example": "2102/{token}/caff960ab6f1627c11b0de3c6406a140/my_dataset.tar.gz"}}}}}}}}, "400": {"description": "Both query parameters are missing.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "One of 'ticket', 'idempotency-key' is required in query parameters."}}}}}}, "404": {"description": "The ticket or idempotency-key not found.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "Process not found."}}}}}}}}}, "/health": {"get": {"summary": "Get health status.", "tags": ["Misc"], "responses": {"200": {"description": "An object with status information.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "enum": ["OK", "FAILED"], "description": "A status of 'OK' or 'FAILED'."}, "details": {"type": "object", "description": "The reason of failure for each component, or 'OK' if not failed.", "properties": {"fiona": {"type": "string", "example": "OK"}, "filesystem": {"type": "string", "example": "OK"}, "postgis": {"type": "string", "example": "OK"}}}}}}}}}}}}, "openapi": "3.0.2", "components": {"schemas": {"datasetMetadata": {"type": "object", "properties": {"epsg": {"description": "The EPSG code of the dataset's CRS.", "type": "integer", "example": 4326}, "driver": {"description": "The driver that was used to read the uploaded file.", "type": "string", "example": "ESRI Shapefile"}}}, "ingestForm": {"type": "object", "properties": {"label": {"type": "string", "description": "The label of the newly created dataset. Only lowercase latin characters and underscore are allowed.", "example": "my_dataset"}, "delimiter": {"type": "string", "description": "In case the file is a delimited text file, the character used to separate values. Ignored for not delimited files.", "example": ";", "default": ","}, "lat": {"type": "string", "description": "The attribute name in delimited text files that corresponds to latitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "latitude"}, "lon": {"type": "string", "description": "The attribute name in delimited text files that corresponds to longitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "longitude"}, "geom": {"type": "string", "description": "The attribute name in delimited text files that corresponds to WKT geometry. Default is 'WKT'; ignored for not delimited files **or** when 'lat', 'lon' are provided.", "example": "geometry"}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV.", "example": "EPSG:4326"}, "encoding": {"type": "string", "description": "The encoding of the file. If not given, the encoding is automatically detected.", "example": "UTF-8"}, "resource": {"type": "string", "description": "A resolvable path to the spatial file. The file could be in compressed form: zipped or tar(.gz) archive.", "example": "/datasets/shapefile.tar.gz"}}, "required": ["label", "resource"]}, "ingestFormMultipart": {"type": "object", "properties": {"label": {"type": "string", "description": "The label of the newly created dataset. Only lowercase latin characters and underscore are allowed.", "example": "my_dataset"}, "delimiter": {"type": "string", "description": "In case the file is a delimited text file, the character used to separate values. Ignored for not delimited files.", "example": ";", "default": ","}, "lat": {"type": "string", "description": "The attribute name in delimited text files that corresponds to latitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "latitude"}, "lon": {"type": "string", "description": "The attribute name in delimited text files that corresponds to longitude, if the geometry is given in means of lat, lon. Ignored for not delimited files.", "example": "longitude"}, "geom": {"type": "string", "description": "The attribute name in delimited text files that corresponds to WKT geometry. Default is 'WKT'; ignored for not delimited files **or** when 'lat', 'lon' are provided.", "example": "geometry"}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS information is obtained by the dataset; **required for** spatial files that do not provide CRS information, e.g. CSV.", "example": "EPSG:4326"}, "encoding": {"type": "string", "description": "The encoding of the file. If not given, the encoding is automatically detected.", "example": "UTF-8"}, "resource": {"type": "string", "format": "binary", "description": "Stream of the spatial file. The file could be in compressed form: zipped or tar(.gz) archive."}}, "required": ["label", "resource"]}, "datasetExtendedInfo": {"type": "object", "description": "Information about the dataset.", "properties": {"label": {"type": "string", "description": "The label of the dataset.", "example": "first_dataset"}, "created": {"type": "string", "format": "date-time", "description": "The creation datetime of the dataset.", "example": "Thu, 11 Feb 2021 12:55:51 GMT"}, "bbox": {"type": "array", "description": "The bounding box of the dataset in the form [xmin, ymin, xmax, ymax]", "items": {"type": "number", "format": "float", "description": "Coordinate"}, "example": [6.4702796, 49.6904649, 6.5205999, 49.8154565]}, "epsg": {"type": "integer", "description": "The EPSG code of the dataset.", "example": 4326}, "features": {"type": "integer", "description": "The total number of features in the dataset.", "example": 19331}, "driver": {"type": "string", "description": "The driver used to read the uploaded file. Null if the dataset was not created from file.", "example": "CSV"}, "source": {"type": "string", "description": "The label of the source dataset, from which this was generated; null otherwise, i.e. in case the file was ingested to the system.", "example": "original_dataset"}, "action": {"type": "string", "description": "The action that was performed over the source dataset, to generate the current dataset. Null if the dataset was not generated through an action.", "example": "constructive.centroid"}}}, "exportForm": {"type": "object", "properties": {"label": {"type": "string", "description": "The label of the dataset to export. If not given, the *active* dataset will be exported.", "example": "my_dataset"}, "driver": {"type": "string", "enum": ["CSV", "ESRI Shapefile", "GeoJSON", "GPKG", "MapInfo File", "DGN", "KML"], "description": "The driver which will be used to export the file. If not given, the driver of the source dataset will be assumed."}, "crs": {"type": "string", "description": "The Coordinate Reference System of the geometries. If not given, the CRS of the source dataset will be assumed.", "example": "EPSG:4326"}, "delimiter": {"type": "string", "description": "The character used to separate values in CSV format. Ignored if driver is not CSV.", "example": ";"}, "name_field": {"type": "string", "description": "The attribute that will be used as the *name* field in KML format. Ignored if driver is not KML.", "default": "Name", "example": "name_en"}, "description_field": {"type": "string", "description": "The attribute that will be used as the *description* field in KML format. Ignored if driver is not KML.", "default": "Description", "example": "description_en"}, "encoding": {"type": "string", "description": "The encoding of the file.", "default": "UTF-8"}, "copy_to_output": {"type": "boolean", "description": "When true, the exported file will be copied to output directory and will persist the destroy of the session.", "default": "false"}}}, "paginationInfo": {"type": "object", "description": "Information about the used pagination.", "properties": {"dataset": {"type": "string", "description": "The label of the dataset that is viewed.", "example": "my_dataset"}, "page": {"type": "integer", "description": "The current page number.", "example": 99}, "resultsPerPage": {"type": "integer", "description": "The maximum number of features for each page.", "example": 10}, "hasMore": {"type": "boolean", "description": "Whether there are more results."}}}, "geoJSON": {"type": "object", "description": "GeoJSON corresponding to the given page of the dataset, with properties the dataset attributes.", "properties": {"type": {"type": "string", "value": "FeatureCollection", "example": "FeatureCollection"}, "features": {"type": "array", "items": {"type": "object", "properties": {"type": {"type": "string", "value": "Feature", "example": "Feature"}, "geometry": {"type": "object", "properties": {"type": {"type": "string", "description": "Geometry type", "example": "Point"}, "coordinates": {"type": "array", "description": "The array shape depends on the type of geometry.", "items": {"anyOf": [{"type": "number", "format": "float"}, {"type": "array", "items": {"anyOf": [{"type": "number", "format": "float"}, {"type": "array", "items": {"type": "float"}}]}}]}, "example": [6.1659779, 49.6150126]}}}, "properties": {"type": "object", "description": "The key is the attribute name", "additionalProperties": {"anyOf": [{"type": "string"}, {"type": "number", "format": "float"}, {"type": "integer"}]}, "example": {"id": 981, "name": "example"}}}}}}}, "filterForm": {"type": "object", "properties": {"src": {"type": "string", "description": "The label of the dataset upon which the filter will be applied. If not given, the **active** dataset will be used.", "example": "original_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "filtered_dataset"}, "wkt": {"type": "string", "description": "The Well-Known-Text representation of the geometry to filter with.", "example": "POLYGON((6.4 49., 6.5 50., 6.6 49.5, 6.4 49.))"}, "crs": {"type": "string", "description": "The CRS of the given geometry. If not given, the dataset CRS will be assumed.", "example": "EPSG:4326"}}, "required": ["label", "wkt"]}, "filterFormMultipart": {"type": "object", "properties": {"src": {"type": "string", "description": "The label of the dataset upon which the filter will be applied. If not given, the **active** dataset will be used.", "example": "original_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "filtered_dataset"}, "wkt": {"type": "string", "format": "binary", "description": "A text file containing the Well-Known-Text representation of the geometry to filter with."}, "crs": {"type": "string", "description": "The CRS of the given geometry. If not given, the dataset CRS will be assumed.", "example": "EPSG:4326"}}, "required": ["label", "wkt"]}, "filterBufferForm": {"type": "object", "properties": {"src": {"type": "string", "description": "The label of the dataset upon which the filter will be applied. If not given, the **active** dataset will be used.", "example": "original_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "filtered_dataset"}, "crs": {"type": "string", "description": "The CRS of the given geometry. If not given, the dataset CRS will be assumed.", "example": "EPSG:4326"}, "center_x": {"type": "number", "format": "float", "description": "The x-coordinate of the center point. For geodetic coordinates, it is the longitude of the center point.", "example": 6.47}, "center_y": {"type": "number", "format": "float", "description": "The y-coordinate of the center point. For geodetic coordinates, it is the latitude of the center point.", "example": 49.69}, "radius": {"type": "number", "format": "float", "description": "The radius from the center point that the geometries should lie within. The radius is specified in units defined by the srid.", "example": 0.1}}, "required": ["label", "center_x", "center_y", "radius"]}, "constructiveForm": {"type": "object", "properties": {"src": {"type": "string", "description": "The label of the dataset upon which the filter will be applied. If not given, the **active** dataset will be used.", "example": "original_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "new_dataset"}}, "required": ["label"]}, "joinForm": {"type": "object", "properties": {"left": {"type": "string", "description": "The label of the dataset upon which the other (*right*) dataset will be joined. If not given, the **active** dataset will be used.", "example": "left_dataset"}, "right": {"type": "string", "description": "The label of the dataset which will be joined to the *left* dataset.", "example": "right_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "new_dataset"}, "join_type": {"type": "string", "enum": ["inner", "outer"], "default": "outer", "description": "The type of the join."}}, "required": ["left", "right", "label"]}, "joinDistanceForm": {"type": "object", "properties": {"left": {"type": "string", "description": "The label of the dataset upon which the other (*right*) dataset will be joined. If not given, the **active** dataset will be used.", "example": "left_dataset"}, "right": {"type": "string", "description": "The label of the dataset which will be joined to the *left* dataset.", "example": "right_dataset"}, "label": {"type": "string", "description": "The label of the newly created dataset.", "example": "new_dataset"}, "join_type": {"type": "string", "enum": ["inner", "outer"], "default": "outer", "description": "The type of the join."}, "distance": {"type": "number", "format": "float", "description": "The distance that the two geometries should be within. It is specified in units defined by the srid of the *left* dataset.", "example": 4.3}}, "required": ["left", "right", "label", "distance"]}}, "responses": {"newDatasetResponse": {"description": "A new dataset is generated.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/datasetMetadata"}}}}, "validationErrorResponse": {"description": "Form validation error.", "content": {"application/json": {"schema": {"type": "object", "description": "The key is the request body key.", "additionalProperties": {"type": "array", "items": {"type": "string", "description": "Description of validation error."}}, "example": {"label": ["Field must be unique for the session."]}}}, "text/plain": {"schema": {"type": "string", "description": "No active dataset."}}}}, "noSessionResponse": {"description": "No session token provided, or the session token does not correspond to an active session.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "No session token found."}}}}}}, "deferredResponse": {"description": "Request accepted for process.", "content": {"application/json": {"schema": {"type": "object", "properties": {"ticket": {"type": "string", "description": "The unique ticket assigned to the request.", "example": "caff960ab6f1627c11b0de3c6406a140"}, "statusUri": {"type": "string", "description": "The URI to poll for the status of the request.", "example": "/jobs/status?ticket=caff960ab6f1627c11b0de3c6406a140"}}}}}}, "exportsListResponse": {"description": "A list with the exports requested in the session.", "content": {"application/json": {"schema": {"type": "array", "items": {"type": "object", "properties": {"label": {"type": "string", "description": "The label of the dataset.", "example": "my_dataset"}, "exports": {"type": "array", "description": "A list of exports for this specific dataset.", "items": {"type": "object", "description": "The export details for a specific driver", "properties": {"driver": {"type": "string", "description": "The driver used for the export.", "enum": ["CSV", "ESRI Shapefile", "GeoJSON", "GPKG", "MapInfo File", "DGN", "KML"]}, "link": {"type": "string", "description": "The link to download the export.", "example": "/dataset/download/my_dataset.csv.gz"}, "output_path": {"type": "string", "description": "The location of the export in the output directory (null if copy to output path has not been requested).", "example": "2102/{token}/{ticket}/my_dataset.csv.gz"}, "status": {"type": "string", "description": "The status of the export.", "enum": ["completed", "processing", "failed"]}}}}}}}}}}, "datasetNotFoundResponse": {"description": "Does not exist yet, possibly because there is no active dataset in the session.", "content": {"application/json": {"schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Error message", "example": "No active dataset found."}}}}}}}, "parameters": {"sessionToken": {"name": "X-Session-Token", "description": "A session unique token.", "required": true, "schema": {"type": "string"}, "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9", "in": "header"}, "label": {"name": "label", "description": "The dataset label.", "schema": {"type": "string"}, "example": "my_dataset", "in": "path", "required": true}, "page": {"name": "page", "description": "The requested page of the dataset.", "schema": {"type": "integer", "minimum": 1}, "default": 1, "required": false, "in": "query"}, "resultsPerPage": {"name": "results_per_page", "description": "The number of results for each page.<br/>**Note**: If this number is larger than a maximum value defined in the server, this maximum value is used instead.", "schema": {"type": "integer", "minimum": 1}, "default": 10, "required": false, "in": "query"}}}}